/*
 Copyright 2012 Google Inc. All Rights Reserved.
 Author: blakely@google.com (Tim Blakely)

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
*/

syntax = "proto2";

import "basics.proto";
import "neuron.proto";

package bigbrain;

enum Distribution_Type{
  DIST_RANDOM = 0;
  DIST_UNIFORM = 1;
}

// This is currently assumed to be flat in the "z" direction. This can - and
// should - be extended to incorporate a 3d rotation matrix to allow for
// arbitrary planes
message FlatRectangularArrangementParams {
  required Position origin = 1;
  optional Dimensions dimensions = 2;
  optional int32 num_rows = 4 [default = 1];
  optional int32 num_cols = 5 [default = 1];
  required Distribution_Type distribution = 3;
}

message GaussianBoxConnectorParams {
  
  optional double height = 1 [default = 5];
  optional double width = 2 [default = 5];
  optional double depth = 3 [default = 5];
  optional double strength = 4 [default = 5];
  optional double amplitude = 5 [default = 0.75];
  optional double std = 6 [default = 2.75];
  optional bool use_origin = 7 [default = false];
  optional Position origin = 8;
}


//////////////////////////////////////

enum Synapse_Type {
  SYN_TYPE_AMPA = 0;
  SYN_TYPE_GABA = 0;
}

enum Neuron_Type {
  N_TYPE_PIAF = 0;
}

enum Channel_Type {
  CH_TYPE_IKNA = 0;
  CH_TYPE_IH = 1;
  CH_TYPE_INAP = 2;
}

enum Arr_Type {
  ARR_TYPE_FLAT_RECTANGULAR = 0;
  ARR_TYPE_SPHERICAL = 1;
}

message Channel_Layout {
  required Channel_Type type = 1;
  optional string state = 2;
  optional string common_params = 3;
  optional string params = 4;
}

message Neuron_Layout {
  required Neuron_Type type = 1;
  optional int32 num_neurons = 2;
  optional string state = 5;
  optional string common_params = 6;
  required string name = 8;
  optional string params = 7;

  repeated Connection_Layout connection = 3;
  repeated Channel_Layout channel = 4;
}

message Arrangement_Layout {
  required Arr_Type type = 1;
  required string name = 5;
  repeated Neuron_Layout  neuron = 2;
  optional string params = 4;
}

enum Target_Dist_Type {
  TARGET_DIST_TYPE_GAUSSIAN_BOX = 0;
}

message Target_Layout {
  required Target_Dist_Type type = 1;
  optional string target_arrangement_name = 6;
  optional string target_neuron_name = 4;
  optional string params = 2;
}

message Connection_Layout {
  required Synapse_Type type = 1;
  optional bool allow_self_connection = 2 [default = false];

  required Target_Layout target = 3;
  optional string params = 5;
}


message Layout {
  required string name = 1;
  optional int32 random_seed = 2;
  optional int32 random_seed_cycles = 5 [default = 1000];
  repeated Arrangement_Layout arrangement = 3;
  repeated Connection_Layout connection = 4;
}
